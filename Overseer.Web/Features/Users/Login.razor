@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json.Linq
@using Overseer.Web.Clients
@using Overseer.Web.Models.Users
@using Refit
@using System.ComponentModel.DataAnnotations

@inject IUsersClient UsersClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject ToastService ToastService

<PageTitle>Overseer - Login</PageTitle>

<div class="flex flex-col min-h-screen bg-background text-white">
    <header class="bg-background p-6">
        <div class="flex justify-between items-center">
            <a href="/" class="flex items-center">
                <img src="images/overseer_logo.svg" alt="Overseer Logo" class="h-8 w-8 mr-1" />
                <span class="text-md font-bold">Overseer</span>
            </a>
            <a href="/docs" class="text-sm px-4 py-2 bg-white/5 rounded-md border border-white/25 hover:border-white/50 transition duration-200 flex items-center">
                <i class="ph ph-file-text mr-2 text-xl"></i>
                Documentation
            </a>
        </div>
    </header>

    <div class="flex-grow flex items-center justify-center">
        <div class="w-full max-w-sm">
            <div class="text-left mb-6">
                <h2 class="text-3xl">Welcome back</h2>
                <p class="text-white/50 mt-4 text-xs">Sign in to your account</p>
            </div>

            <div>
                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="space-y-4">
                        <div>
                            <label for="username" class="text-white/50 block text-xs font-medium mb-2">Username</label>
                            <InputText id="username" @bind-Value="loginModel.Username" class="placeholder:text-white/50 placeholder:text-xs w-full px-3 py-2 bg-background border border-white/25 rounded-md focus:outline-none focus:border-white/50 hover:border-white/50" placeholder="Giblit124" />
                            <ValidationMessage For="@(() => loginModel.Username)" class="text-danger text-xs mt-1" />
                        </div>
                        <div class="mt-2">
                            <div class="flex items-center justify-between mb-2">
                                <label for="password" class="text-white/50 block text-xs font-medium">Password</label>
                                <a href="#" class="text-xs text-white/50 hover:text-white/75 hover:underline">Forgot Password?</a>
                            </div>
                            <InputText type="password" id="password" @bind-Value="loginModel.Password" class="placeholder:text-white/50 placeholder:text-xs w-full px-3 py-2 bg-background border border-white/25 rounded-md focus:outline-none focus:border-white/50 hover:border-white/50" placeholder="********" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger text-xs mt-1"/>
                        </div>
                        <div>
                            <button type="submit" class="mt-6 w-full py-2 px-4 bg-green-400 text-white rounded-md hover:bg-green-500 transition duration-200">Sign In</button>
                        </div>
                    </div>
                </EditForm>
            </div>

            <p class="text-center mt-6 text-xs text-white/50">
                By continuing, you agree to Overseer's <a href="#" class="text-accent hover:text-white/75 underline">Terms of Service</a> and <a href="#" class="text-accent hover:text-white/75 underline">Privacy Policy</a>.
            </p>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();

    private async Task HandleLogin()
    {
        try
        {
            var response = await UsersClient.Login(loginModel);

            await LocalStorage.SetItemAsync("accessToken", response.AccessToken);
            await LocalStorage.SetItemAsync("refreshToken", response.RefreshToken);

            await AuthStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("/");
        }
        catch (ApiException ex)
        {
            var json = JObject.Parse(ex.Content!);
            var message = json.Value<string>("detail");
            await ToastService.Show("Error", message!, Toast.ToastType.Error);
            loginModel = new();
        }
        catch (Exception)
        {
            await ToastService.Show("Error", "Invalid username or password", Toast.ToastType.Error);
            loginModel = new();
        }
    }
}